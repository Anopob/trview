//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.drm
//  ID Bytes: 
//   History: 
//------------------------------------------------


enum <uint32> SectionType 
{
    Section = 0,
    Texture = 5,
    Audio = 6
};


struct Header
{
    uint32   length;
    SectionType type;
    uint32   header_size; // extra leading bits 
    uint32   id;
    uint32   separator;
};

struct NewSectionHeader
{
    /*
    uint x;
    uint y;
    */

    uint start;
    local uint section_index = start >> 3;
    //uint start;
    uint value;

    // BigEndian();
    // uint64 value;
    // LittleEndian();
    // local ushort sectionIndex = (ushort)((value & 0x0000000000003FFF) >> 0);
    // local ushort sectionIndex = value & 0x3fff;
    // local uint pointerOffset = (uint)(((value & 0x0000003FFFFFC000) >> 14) * 4);
    // local uint dataOffset = (uint)(((value & 0xFFFFFC000000000) >> 38));
    // local uint dataOffset = (uint)((value >> 35) & 0xFFFFFFFF);
    
    // Printf("%d, %d, %d, %Lu\n", sectionIndex, pointerOffset, dataOffset, (value & 0xFFFFFFC000000000));
};

struct SectionData (int extra, int size)
{
    NewSectionHeader section_header[extra / 8];
    byte data[size];
};

struct TextureData (int extra)
{
    NewSectionHeader section_header[extra / 8];
    FSkip(4); // PCD9
    char format[4];
    uint32 pixel_data_length;
    uint32 unknown_2;
    uint16 width;
    uint16 height;
    uint32 unknown_3;
    byte data[pixel_data_length];
};

struct Vertex
{
    int16 x;
    int16 y;
    int16 z;
    int16 unknown[5];
};

struct Mesh(uint32 start)
{
    uint16 index_count;
    uint16 unknown_1;
    uint16 texture_id;
    uint16 unknown[5];
    uint32 end_of_mesh;
    uint16 indices[index_count];
    Printf("%d, %d, %d\n", start, end_of_mesh, FTell());
    FSkip((end_of_mesh + start) - FTell());
    Printf("%d\n", FTell());
};

struct MeshHeader
{
    byte data[180];
};

struct VertexData (int extra, int size)
{
    NewSectionHeader section_header[extra / 8] <optimize=false>;
    local uint32 start = FTell();

    local int i = 0;
    for (i = 0; i < extra / 8; ++i)
    {
        FSeek(start + section_header[i].value);
        uint32 data_boundary;
    }

    FSeek(start);

    uint16 unknown_1[8];
    float scale_x, scale_y, scale_z, scale_w;
    uint32 vertex_count;
    uint32 length;

    byte unknown[5 * 4];
    float x;
    float y;
    float z;
    byte unknown_2[length - 40 - 20 - 12];
    Vertex vertices[vertex_count];
    
    local int mesh_index = 0;
    local uint32 index_count = 0;
    
    while(true)
    {
        if (ReadUInt() > 0)
        {
            Mesh mesh(start);
        }
        else
        {
            FSkip(4);
            break;
        }
    }
};

struct FileHeaderHeader
{
    uint32 type;
    uint32 start;
};


struct LocalData
{
    uint32 pointer;
    uint32 data;
};

struct OuterData
{
    ushort section;
    uint32 pointer;
    uint32 data;
};

struct SectionHeader
{
    uint num_local_data;
    uint num_outer_data;
    uint num_extra_data_1;
    uint num_extra_data_2;
    uint num_extra_data_3;

    LocalData local_data[num_local_data];
    OuterData outer_data[num_outer_data];
    uint extra_data_1[num_extra_data_1];
    uint extra_data_2[num_extra_data_2];
    uint extra_data_3[num_extra_data_3];
};

// Information about the file in general.
struct FileHeader(int extra, int size)
{
    local int start = FTell();
    
    Printf("%d, extra: %d\n", i, extra);
    //SectionHeader header;
    local int number_of_headers = extra / 8;
    // FileHeaderHeader headers[number_of_headers];
    NewSectionHeader section_header[number_of_headers] <optimize=false>;

    // New file header reading:
    uint16 flags[4];
    uint32 id;

    // World model...
    if (!flags[1])
    {
        // 280 total header size.
        byte world_header[260];
        float x;
        float y;
        float z;
        uint32 unknown_3;
        ushort unknown_4;
    }

    byte unknown[start + extra + size - FTell()];

    // Hack to keep the old stuff working
    FSeek(start + extra + 10);   
    byte unknown_2[size - 10];
};

struct WorldVertex
{
    int16 x;
    int16 y;
    int16 z;
    uint16 a;
    uint16 b;
    int16 nx;
    int16 ny;
    int16 nz;
    uint16 f;
    uint16 g;
};

struct WorldMeshData(int length)
{
    WorldVertex vertex[length / 20];
};

struct WorldMeshHeader
{
    uint32 type;
    uint32 start;
};

struct WorldMesh
{
    uint32 number_of_indices;
    uint32 separator;
    uint16 unknowns[16];
    uint32 end_of_mesh;
    uint16 indices[number_of_indices];
};
/*
struct WorldMeshes(int count)
{
    local int start = FTell();
    for (i = 0; i < count; ++i)
    {    
        WorldMesh mesh;
        total_indices += mesh.number_of_indices;
        FSeek(mesh.end_of_mesh + start);
    }
};*/

struct WorldModelData(int extra, int length)
{
    local int number_of_headers = extra / 8;
    local int total_indices = 0;
    // WorldMeshHeader headers[number_of_headers];
    NewSectionHeader section_header[number_of_headers];
    
    local int start = FTell();    
    local int i = 0;
    // WorldMeshes meshes(number_of_headers);
    /*
    for (i = 0; i < number_of_headers; ++i)
    {
        FSeek(start + headers[i].start);
        FSkip(-40);
        WorldMesh mesh;
        total_indices += mesh.number_of_indices;
    }*/

    FSeek(start + length);
};


typedef SectionData AudioData;
typedef SectionData UnknownData;

uint32 drm_header;          // 0xE
uint32 number_of_sections;
Header section_headers[number_of_sections];

local int i = 0;
local int zero_secs = 0;

local int has_model = 0;

local int audio_count = 0;
local int texture_count = 0;
local int section_count = 0;

for (i = 0; i < number_of_sections; ++i)
{
    Printf("%d, %d\n", i, section_headers[i].id);
    switch(section_headers[i].type)
    {
        case Section:
        {
            ++section_count;
            if (zero_secs == 0)
            {
                FileHeader data(section_headers[i].header_size / 32, section_headers[i].length) <bgcolor=0x2222FF>;
                has_model = data.flags[1];
            }
            else if (zero_secs == 1)
            {
                if (has_model)
                {
                    VertexData data(section_headers[i].header_size / 32, section_headers[i].length);
                }
                else
                {
                    WorldMeshData data(section_headers[i].length);
                }
            }
            else if (ReadUInt() == 64 || ReadUInt() == 216)// || ReadUInt() == 88 || ReadUInt() == 96 || ReadUInt() == 1160)
            {
                WorldModelData data(section_headers[i].header_size / 32, section_headers[i].length);
            }
            else
            {   
                SectionData data(section_headers[i].header_size / 32, section_headers[i].length);
            }
            ++zero_secs;
            break;
        }
        case Texture:
        {
            ++texture_count;
            TextureData data(section_headers[i].header_size / 32);
            break;
        }
        case Audio:
        {
            ++audio_count;
            AudioData data(section_headers[i].header_size / 32,section_headers[i].length);
            break;
        }
        default:
        {
            UnknownData data(section_headers[i].header_size / 32, section_headers[i].length);
            break;
        }
    }
}

