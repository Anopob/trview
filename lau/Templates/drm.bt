//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


enum <uint32> FileType 
{
    Texture = 5
};


struct Header
{
    uint32   length;
    FileType type;
    uint32   preamble; // extra leading bits 
    uint32   unknown;
    FSkip(4);          // FFFFFFFF
};

struct FileData (int extra, int size)
{
    byte preamble[extra];
    byte data[size];
};

struct TextureData (int extra, int size)
{
    byte preamble[extra];
    FSkip(4); // PCD9
    char format[4];
    uint32 unknown_1;
    uint32 unknown_2;
    uint16 width;
    uint16 height;
    uint32 unknown_3;
    byte data[size - 24];
};

uint32 drm_header;          // 0xE
uint32 number_of_files;
Header file_headers[number_of_files];

local int i = 0;
for (i = 0; i < number_of_files; ++i)
{
    switch(file_headers[i].type)
    {
        case Texture:
        {
            TextureData data(file_headers[i].preamble / 32, file_headers[i].length);
            break;
        }
        default:
        {
            FileData data(file_headers[i].preamble / 32, file_headers[i].length);
            break;
        }
    }
    
}
