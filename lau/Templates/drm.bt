//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.drm
//  ID Bytes: 
//   History: 
//------------------------------------------------


enum <uint32> SectionType 
{
    Section = 0,
    Texture = 5,
    Audio = 6,
    Trigger = 7
};


struct Header
{
    uint32   length;
    SectionType type;
    uint32   preamble; // extra leading bits 
    uint32   id;
    FSkip(4);          // FFFFFFFF
};

struct SectionData (int extra, int size)
{
    uint16 preamble[extra / 2];
    byte data[size];
};

struct TextureData (int extra)
{
    byte preamble[extra];
    FSkip(4); // PCD9
    char format[4];
    uint32 pixel_data_length;
    uint32 unknown_2;
    uint16 width;
    uint16 height;
    uint32 unknown_3;
    byte data[pixel_data_length];
};

struct Vertex
{
    int16 x;
    int16 y;
    int16 z;
    int16 unknown[5];
};

struct Mesh(uint32 start)
{
    uint16 index_count;
    uint16 unknown_1;
    uint16 texture_id;
    uint16 unknown[5];
    uint32 end_of_mesh;
    uint16 indices[index_count];
    Printf("%d, %d, %d\n", start, end_of_mesh, FTell());
    FSkip((end_of_mesh + start) - FTell());
    Printf("%d\n", FTell());
};

struct MeshHeader
{
    byte data[180];
};

struct VertexData (int extra, int size)
{
    byte preamble[extra];
    local uint32 start = FTell();
    uint16 unknown_1[8];
    float scale_x, scale_y, scale_z, scale_w;
    uint32 vertex_count;
    uint32 length;

    byte unknown[length - 40];
    Vertex vertices[vertex_count];
    
    local int mesh_index = 0;
    local uint32 index_count = 0;
    
    while(true)
    {
        if (ReadUInt() > 0)
        {
            Mesh mesh(start);
        }
        else
        {
            FSkip(4);
            break;
        }
    }
};

// Information about the file in general.
struct FileHeader(int extra, int size)
{
    byte preamble[extra];
    uint16 flags[4];
    uint16 id;
    byte unknown_2[size - 10];
};

typedef SectionData AudioData;
typedef SectionData TriggerData;
typedef SectionData UnknownData;

uint32 drm_header;          // 0xE
uint32 number_of_sections;
Header section_headers[number_of_sections];

local int i = 0;
local int zero_secs = 0;
local int has_model = 0;
for (i = 0; i < number_of_sections; ++i)
{
    switch(section_headers[i].type)
    {
        case Section:
        {
            if (zero_secs == 0)
            {
                FileHeader data(section_headers[i].preamble / 32, section_headers[i].length);
                has_model = data.flags[1];
            }
            else if (zero_secs == 1 && has_model)
            {
                VertexData data(section_headers[i].preamble / 32, section_headers[i].length);
            }
            else
            {
                SectionData data(section_headers[i].preamble / 32, section_headers[i].length);
            }
            ++zero_secs;
            break;
        }
        case Texture:
        {
            TextureData data(section_headers[i].preamble / 32);
            break;
        }
        case Audio:
        {
            AudioData data(section_headers[i].preamble / 32,section_headers[i].length);
            break;
        }
        case Trigger:
        {
            TriggerData data(section_headers[i].preamble / 32, section_headers[i].length);
            break;
        }
        default:
        {
            UnknownData data(section_headers[i].preamble / 32, section_headers[i].length);
            break;
        }
    }
}
